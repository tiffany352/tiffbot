module tiffbot;

import std.irc, std.string, std.process, std.file, std.thread, std.time, std.fun;
import privilege;

// external callbacks: nick user host privilege channel server args


// callbacks array
shared (string, string delegate(Server,string,User,string[]))[] callbacks;

(string,string[]) parseInput(Server serv, string chan, User user, string i) {
  bool inctcp = false;
  int start;
  
  for (int j=0;j<i.length;j++) {
    alias c = i[j];
    if c == 1 {
      if inctcp {
        auto res = handleCTCP(serv, chan, user, i[start+1 .. j]);
        if res
          serv.msg(user.nick,"\x01$res\x01");
      } else {
        start = j;
      }
      
      inctcp = !inctcp;
    }
  }
  
  i = i.strip();
  string command;
  string[] args;
  if i.startsWith "+" {
    (command, string a) = (i.startsWith "+" #.slice " ");
    args = a.split " ";
  } else {
    FindResult f = i.toLower().find "tiffbot";
    if f {
      string[] s = i[f.pos..$].split " ";
      if s.length > 1 {
        command = s[1].toLower();
        args = s[2..$];
      }
    }
  }
  
  //auto ret = (command.toLower(),args);
  return (command.toLower(),args);
}

string handleInput (Server server, string channel, User user, string command, string[] args) {
  if !(user.hasPrivilege PrivilegeLevel.None) return null;
  for auto c <- callbacks {
    if c[0] == command {
      writeln "Calling internal callback $command";
      return c[1](server,channel,user,args);
    }
  }
  if command.find ".."
    return ":D nice try";
  if command.startsWith "/"
    return "hehe you so silly :3";
  if exists "commands/$command" {
    writeln "Calling external callback $command";
    string[auto~] a;
    a ~= user.nick;
    a ~= user.user;
    a ~= user.host;
    a ~= "$(getPrivilege user)";
    //writeln "$(s.ptr) length: $(s.length)";
    //writeln "priv: $s";
    //a ~= s;
    a ~= channel;
    a ~= server.name;
    a ~= args;
    return std.string.join readback("commands/$command",a[]);
  }
  writeln "Command $command not found.";
  return null;
}

string callHook (Server server, User user, string name, string[] args) {
  if exists "hooks/$name" {
    string[auto~] a;
    a ~= user.nick;
    a ~= user.user;
    a ~= user.host;
    a ~= "$(getPrivilege user)";
    a ~= server.name;
    a ~= args;
    return std.string.join readback("hooks/$name",a[]);
  }
  return null;
}

string handleCTCP(Server server, string channel, User user, string command) {
  (command,string[] args) = command.split " " #.(that[0], that[1 .. $]);
  writeln "CTCP $command: $args";
  
  if command.find ".."
    return ":D nice try";
  if command.startsWith "/"
    return "hehe you so silly :3";
  if exists "hooks/ctcp/$command" {
    string[auto~] a;
    a ~= user.nick;
    a ~= user.user;
    a ~= user.host;
    a ~= "$(getPrivilege user)";
    a ~= server.name;
    a ~= command;
    a ~= args;
    return std.string.join readback("hooks/ctcp/$command",a[]);
  }
  return null;
}

shared Server[] servers;
shared ThreadPool tp;
//void init(string nick, string host, int port = 6667, string user = "NeatIRCLib", string identd = "neatirclib", string realname = "Neat IRC Library", string pass = null)
void newServer(string nick, string address, string port, string passwd, string[] chans) using new Server (nick,address,atoi port,"tiffbot","tiffbot","Neat IRC Library",pass=>passwd) {
  writeln "$(void*:that) : $address";
  setCommand(Command.PRIVMSG, new \(User u, string[] args) {
    writeln "$(void*:that)";
    string message = args[1];
    string target = args[0];
    writeln "$target: <$(u.nick)> $message";
    auto t = parseInput(that,target,u,message);
    //if !t return;
    if !t[0] return;
    string r = handleInput(that,target,u,t[0],t[1]);
    if r {
      if target == me.nick {
        msg(u.nick,r);
        writeln "$(u.nick): <$(me.nick)> $r";
      } else {
        msg(target,u.nick ~ ": " ~ r);
        writeln "$target: <$(me.nick)> $(u.nick): $r)";
      }
    }
  });
  
  onCommand = new \(User u, Command command, string[] args) {
    auto res = callHook(that, u, "$(int:command)", args);
    sendCommand res;
  };
  
  for auto c <- chans
    c.join;
  
  tp.addTask &that.listen;
  servers ~= that;
}

